# вывод по данным sh и температуре

import network

import matplotlib.pyplot as plt
import numpy as np

# задание режима (параметров) 

sh, temp =1377.6798, 0.00460615		# for 1-2mm


# промежутокИ варьирования
temp_a, temp_b = 0.001, 0.0065
term_cond_a, term_cond_b = 0.25, 0.25
spec_heat_a, spec_heat_b = 52, 1e4 #400 

spec_differ =  spec_heat_b - spec_heat_a    #400 - 52
temp_deffer = temp_b - temp_a


# максимальные ОН возникающие во время обработки
max_deform_4mm = 1.7808997571777654
max_deform_1_2mm = 7.096586917269457	#max(net_data_upload_new_range_1_4mm.Data_load().y)
print(max_deform_1_2mm)

max_stress = 900

# координаты по кромке 
edge_lenght = [0, 10, 18, 26, 30, 34, 38, 42, 46, 50, 52.5, 55, 57.5, 60]


# функции-активации
def gauss(x):
	return np.exp(-x**2) 

def gauss07(x):
	return np.exp(-x**2) - 0.7 

def gauss_prime(x):
	return -2*x * np.exp(-x**2)


net_deform = network.Network([4, 30, 1], gauss, gauss_prime) 
net_stress = network.Network([4, 30, 1], gauss07, gauss_prime) 

net_interval = 60

stress_interval = 500
Z = np.linspace(0, stress_interval, 20)

# веса для ОН
net_stress.weights =[np.array([[ 6.09981698e-01,  1.36056715e-01, -5.21681077e+00,
			3.07114056e-01],
		[ 2.18580051e-01,  4.44575997e-01,  2.57621931e+00,
			-4.16143016e+00],
		[ 6.16748816e-01, -1.09319728e-01, -6.59958876e-01,
			7.29816981e-01],
		[-9.10753237e-02, -6.68367784e-01,  4.03745052e-01,
			-1.28492859e+00],
		[ 5.60127597e-01,  7.42448691e-01, -1.87961533e+00,
			-1.44043018e+00],
		[-6.34578680e-02,  6.24890319e-01, -9.18583589e+00,
			1.21660174e-01],
		[ 1.44617130e+00, -2.47527221e-01,  1.90466966e-02,
			1.24821518e+00],
		[ 4.57128675e-02,  1.66370561e+00,  2.39271105e+00,
			1.14379052e+00],
		[ 1.66727897e-01,  9.70513398e-01,  3.44130749e-01,
			1.87224448e-01],
		[-1.02191077e+00, -1.36246661e+00, -1.33957242e+00,
			-3.32732765e-01],
		[ 1.76936640e+00,  2.53986974e-01,  5.20227956e+00,
			-4.23406211e-01],
		[-1.57594295e+00,  1.69093122e-01,  1.28833289e+00,
			-1.13650512e+00],
		[ 2.48786765e-02,  2.65296536e-02,  1.36537320e-02,
			-5.14950752e-03],
		[ 1.17584831e+00, -2.50569746e-01,  2.60024282e+00,
			5.65897370e-02],
		[-1.25456662e-01, -8.19509438e-01, -1.79110361e+00,
			3.63481682e-01],
		[ 1.58432036e+00,  2.10740179e-01, -1.16725228e+00,
			-8.27881719e-01],
		[-3.05217996e-01, -6.98902340e-01,  2.30111577e+00,
			-1.58847975e+00],
		[-9.76703967e-01,  1.39669445e-02, -2.44266081e-02,
			-1.16936696e-01],
		[-9.81159916e-01, -1.41011701e-01,  7.48715619e-01,
			5.17041027e-01],
		[ 1.56416272e+00, -1.16224221e-01,  7.52752643e-01,
			-4.84697276e-01],
		[-1.96613651e-14, -2.31607680e-14, -9.42469360e-14,
			5.47281007e-14],
		[ 7.25234077e-01,  4.10928643e-01, -7.69310391e+00,
			1.47144337e-02],
		[ 1.58156212e+00, -9.60906712e-03, -2.45599222e+00,
			4.22432385e-01],
		[-2.27421279e+00,  4.17103151e-01, -2.83707630e+00,
			-1.54417242e+00],
		[ 2.23000966e+00, -2.23569325e-01,  2.17076890e+00,
			3.02460349e-01],
		[-3.07473314e-01, -6.59108046e-01, -1.33323684e+00,
			1.69662479e+00],
		[ 8.63580633e-02,  6.52203305e-01,  8.05946218e-01,
			1.58193515e+00],
		[-2.20496477e+00,  4.99250530e-01, -8.26218080e+00,
			3.99135460e-02],
		[-4.82467358e-01, -8.48490453e-01,  3.81108776e-01,
			8.11983770e-01],
		[ 5.83718158e-01, -3.04629002e-02,  2.80413275e-01,
			-7.32487509e-02]]), np.array([[ 0.38989937, -1.06646393,  0.20695204,  0.5602838 ,  0.18318458,
			0.69378674, -0.28510627,  1.91071491, -0.09551776,  0.1243301 ,
			-0.44268567,  0.36820295, -1.13101759,  0.13850698,  0.30598652,
			-0.03695845,  0.19095709, -0.18724487, -0.28077452, -0.20415873,
			-2.60480156, -3.30655861,  0.27397163, -0.32626106, -0.29654965,
			-0.18985439, -0.15704988, -1.0920709 , -0.26267811,  0.0824888 ]])] 
net_stress.biases =[np.array([[-5.29281562e-02],
		[-1.22425798e+00],
		[ 1.81365414e-01],
		[-1.89832458e+00],
		[ 6.84826299e-01],
		[-3.00207832e-01],
		[-1.27854344e+00],
		[ 1.80671415e+00],
		[-4.64634450e-01],
		[ 1.63205103e-01],
		[-2.37740817e-01],
		[ 3.84770843e-01],
		[-2.36400907e-02],
		[-2.00875072e-01],
		[ 9.00177267e-01],
		[-3.42239321e-01],
		[ 1.17461833e+00],
		[ 8.46800135e-01],
		[ 6.65548701e-01],
		[-7.15861347e-01],
		[ 1.07166759e-14],
		[-2.09192419e+00],
		[-4.33890461e-01],
		[ 9.58813542e-01],
		[-1.19872429e+00],
		[-6.17541695e-01],
		[-1.76951278e+00],
		[-2.28047420e-01],
		[ 4.97961925e-01],
		[ 4.24868190e-01]]), np.array([[-1.2467181]])]
	

def draw_plots(thickness, sh, temp):

	sh_trans = (sh - spec_heat_a) / spec_differ
	temp_trans = (temp - temp_a) / temp_deffer



	if thickness == 1000 or thickness == 2000:
		net_deform.weights =[np.array([[-2.00520221e+00, -1.97098330e-01,  1.58064249e+00,
		-1.57097311e-01],
		[ 1.13837394e+00, -1.43149174e-01, -2.25754109e+00,
		-1.30249693e+00],
		[ 2.72756444e+00,  8.65299739e-01, -6.15503801e-02,
		-1.13909551e+00],
		[-1.22634802e+00, -5.67996107e-01, -5.96107302e-01,
		-4.69089979e-01],
		[ 1.31762286e+00,  1.47767004e-01,  5.34638598e-01,
		-1.24158998e+00],
		[ 9.32161296e-01,  4.96147381e-01, -6.11924614e-01,
		-1.39216121e+00],
		[ 5.93460771e-01,  1.68988151e+00,  6.93004193e-01,
		3.41854341e-01],
		[-3.63972620e-01,  1.20607096e+00,  1.99994176e-01,
		-1.10574776e+00],
		[ 1.31815597e+00, -1.30800351e-01,  1.11415548e+00,
		-1.48360035e+00],
		[ 9.97266279e-02, -1.19406827e-01, -9.29732972e-02,
		-6.07372499e-02],
		[-1.25233891e+00, -3.31994381e-01, -1.31315128e+00,
		-4.76298878e-01],
		[ 8.42925789e-02, -9.17866875e-02,  1.76321578e+00,
		1.61011663e+00],
		[-1.19841562e+00,  5.35160290e-01, -1.22191236e+00,
		-5.99499470e-01],
		[ 7.93741865e-01, -8.09590323e-01, -9.92760711e-01,
		4.55041871e-01],
		[ 4.15379124e-01, -5.14438229e-01,  8.63402023e-01,
		4.86120811e-01],
		[ 1.13819433e+00,  4.75949655e-01, -4.81265810e-01,
		4.23237192e-01],
		[ 2.19807641e-01,  1.45731933e+00,  3.15417801e-02,
		-1.81167185e-01],
		[ 2.76887967e+00, -7.40173512e-01, -7.59539098e-01,
		5.36445902e-01],
		[ 1.08085215e+00, -1.30252409e-01, -1.47999044e+00,
		-3.02884953e-01],
		[ 5.35507135e-01, -3.36972549e-01, -1.50039059e+00,
		-3.80639069e-01],
		[ 1.39160542e+00, -4.25965545e-01,  7.75944718e-01,
		3.84099174e-01],
		[-2.00148163e+00, -2.00812716e-01,  2.22756564e+00,
		-4.94609557e-02],
		[-1.89283737e+00,  8.27599978e-02,  1.52822314e-01,
		-8.39434749e-01],
		[ 1.02090814e+00, -2.73607054e-03, -5.37876688e-01,
		-3.59070967e-01],
		[ 4.10889229e+00, -2.21081197e-01, -3.20807660e-01,
		1.62888302e+00],
		[-1.32178368e+00, -1.18690627e-01, -8.30227480e-02,
		1.31909421e-01],
		[ 4.69161426e-01,  4.76815163e-01,  7.49326546e-01,
		-4.53982687e-01],
		[-1.21180616e+00,  1.19153338e-01, -3.42234374e-01,
		-8.21180137e-01],
		[ 8.11334214e-01, -1.07992774e-01, -1.14715550e+00,
		2.52925099e+00],
		[ 1.16389312e+00, -5.56907156e-01,  4.79562476e-01,
		-4.58653552e-01]]), np.array([[-0.52652406,  0.12705329, -2.41377817, -1.01487185, -0.75792445,
		0.42694683,  0.57400516, -0.23178197, -1.72947702,  0.26329132,
		-0.97555474, -0.10448699, -0.14835738,  0.01308575,  0.0798451 ,
		0.7593428 , -0.52957824, -0.47609192, -0.49107778, -0.15415793,
		-0.70933779,  0.3669965 , -0.66298169, -0.2013733 ,  1.26808908,
		-1.39642976, -1.03185171, -0.52464379, -0.08241624, -0.3032597 ]])] 
		net_deform.biases =[np.array([[0.88303885],
		[ 1.03750367],
		[ 2.43032382],
		[-0.39079071],
		[ 0.11688673],
		[-0.70511095],
		[ 0.58007993],
		[ 1.72375636],
		[ 2.2389955 ],
		[-1.49405368],
		[ 0.18962436],
		[-0.58481396],
		[-0.73477927],
		[-0.0354853 ],
		[-2.05389121],
		[-0.14622   ],
		[ 0.58274512],
		[-1.58454267],
		[-1.093819  ],
		[-1.95511942],
		[ 0.76449169],
		[ 0.47551614],
		[-1.14401338],
		[ 1.9125021 ],
		[-0.04958864],
		[-1.41483321],
		[-0.87972791],
		[-0.83855497],
		[-0.91102824],
		[ 1.28630253]]), np.array([[-0.35485726]])]  

		max_deform = max_deform_1_2mm
			
	elif thickness == 4000:
		net_deform.weights =[np.array([[-1.91153677, -1.01971393,  1.44972003, -0.42397285],
		[-0.03937771,  0.08039586,  0.95034151,  0.04352089],
		[-0.32386933,  2.25452035,  0.11966412,  2.02742766],
		[-2.14033679, -0.84244375,  1.26438362,  1.1652387 ],
		[ 0.71470261, -2.21482428,  0.80416366,  2.69397695],
		[ 0.51557622,  2.0995235 , -0.43118444, -0.33047383],
		[-1.48681659, -0.33179413, -1.75865897,  0.78865457],
		[ 1.53051741,  0.02693706,  0.59382993,  1.10307933],
		[-1.23220456, -0.84197122, -1.00412221, -1.62927624],
		[-0.38081564,  0.21673909, -2.00213328,  0.14727206],
		[ 1.55115552, -1.07183058,  0.90604602,  0.84930201],
		[ 0.23307417, -1.58206576,  1.97966558,  0.85230172],
		[ 1.34195465, -0.90715144, -0.25234397, -0.279468  ],
		[ 1.40647315, -0.02774383, -0.3491153 ,  2.63384873],
		[-1.76161613, -0.53790067,  0.35778629,  0.02059921],
		[ 0.9000448 , -0.18114803, -1.56286812,  2.69560751],
		[ 0.3526977 , -0.59888999, -1.49116742,  0.10329896],
		[-0.03771135,  0.30685894,  0.43277528,  0.17965451],
		[ 0.66327224,  0.43503235,  0.15836633, -0.68036844],
		[-2.46518586,  0.29154998,  0.91738678, -1.24803292],
		[ 2.43224372,  1.34131905,  1.26560701, -0.94505554],
		[ 1.52638075,  0.61588307, -1.03788598,  0.22432816],
		[ 0.28339314,  1.42040496,  0.52887932,  0.53801497],
		[-0.5533326 , -2.52113873,  1.59595096,  0.76408676],
		[-0.98723442,  0.52000796, -0.19065863, -0.28682406],
		[-1.05751302,  0.34877554,  1.09047194, -1.46109896],
		[ 0.55031979,  0.59520886, -0.92656757, -0.29775419],
		[-1.23613581, -0.12341266,  1.85624871, -0.53261866],
		[ 0.88548111,  1.4240714 , -1.50015059,  0.71080287],
		[-0.24808737, -0.08734316, -0.17268721,  0.82588002]]), np.array([[-0.09182689, -0.84241201,  0.09612752,  0.66730889,  0.75946102,
			0.10241802, -0.04264954, -0.29675512, -0.04982721,  1.44042631,
		-1.02221032,  0.5405395 ,  0.49959729,  1.89454147, -0.68656585,
		-0.37418699,  0.45129519, -0.18547765,  0.71556504,  1.02130461,
		-0.38443249,  0.25269217,  1.19134679,  0.00338123,  0.51553673,
		-0.47393115,  0.77094516, -0.71800079, -0.16202609,  2.90546815]])] 
		net_deform.biases =[np.array([[-0.42588151],
		[ 1.03657132],
		[-0.36066944],
		[ 0.39521148],
		[ 0.68057658],
		[-0.86063049],
		[ 0.04236803],
		[-0.16296219],
		[-0.16730467],
		[-0.54232358],
		[ 0.26836696],
		[ 0.04014771],
		[-0.39418147],
		[ 0.17703337],
		[-1.26990199],
		[ 1.99473997],
		[ 0.19027506],
		[ 0.75947086],
		[ 0.1712933 ],
		[ 0.38209989],
		[ 0.23021915],
		[-0.35107947],
		[-0.48762931],
		[-0.52734397],
		[ 0.91189233],
		[-0.5914389 ],
		[-0.98598883],
		[ 1.06747491],
		[ 0.57287993],
		[ 1.6093273 ]]), np.array([[-0.91585952]])]

		max_deform = max_deform_4mm
	

	def taking_deform(network, data):
		""" получение результата работы сети
	(что возвращает сеть после обучения) """

		result = network.feedforward(data) 
		return result * max_deform

	def taking_stress(network, data):
		""" получение результата работы сети
	(что возвращает сеть после обучения) """

		result = network.feedforward(data) 
		return result * max_stress

	Y_deform = []
	for j in range(len(edge_lenght)):
		test_data = [[sh_trans], [temp_trans], [edge_lenght[j] / 60], [thickness / 4000]]
		stress = taking_deform(net_deform, test_data)
		Y_deform.append(stress[0][0])  # иначе получим array



	Y_stress = []
	for j in range(len(Z)):
		test_data = [[sh_trans], [temp_trans], [Z[j] / 4000], [thickness / 4000]]
		stress = taking_stress(net_stress, test_data)
		Y_stress.append(stress[0][0])  # иначе получим array

	return Y_deform, Y_stress

	# plt.plot(edge_lenght, Y, label = f'{thickness =}mkm')  

	# plt.legend()
	# plt.title(f'sh = {round(sh, 1)}, temp = {round(temp, 4)}')
	# plt.xlabel('Глубина, мм')
	# plt.ylabel('Прогиб, мм')    
	# # plt.savefig(directory_name + f'/sh_{round(sh)}_temp_{round(temp, 4)}.jpg')
	# # plt.close()




# draw_plots(1000)
# draw_plots(2000)
# draw_plots(4000)



X_real_1mm = np.linspace(0, 60, 61)
Y_real_1mm = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.010368783000000001, -0.037390346, -0.06843975899999999, -0.10351853, -0.142628367, -0.185771175, -0.23294905600000002, -0.284164311, -0.339419438, -0.39871713799999997, -0.462060309, -0.529452051, -0.600895666, -0.676394657, -0.755952733, -0.839573804, -0.927261987, -1.019021605, -1.114857188, -1.214773476, -1.3187754150000002, -1.4268681650000001, -1.5390570970000002, -1.655347796, -1.775746061, -1.900257908, -2.028889571, -2.161647503, -2.298538379, -2.439569096, -2.584746775, -2.734078766, -2.887572645, -3.045236219, -3.2070775279999997, -3.373104847, -3.543326686, -3.7177517950000003, -3.896389165, -4.079248032, -4.266337876, -4.457668428, -4.653249669, -4.853091835, -5.0572054170000005, -5.26560117, -5.478290106999999, -5.69528351, -5.989]
Y_real_1mm = [-1*yi for yi in Y_real_1mm]

X_real_2mm = X_real_1mm
Y_real_2mm = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001914191, -0.012231888, -0.024002694999999998, -0.037226686, -0.051903947, -0.068034569, -0.085618655, -0.104656316, -0.125147673, -0.14709285600000002, -0.170492004, -0.195345264, -0.22165279599999999, -0.24941476499999998, -0.278631348, -0.309302729, -0.341429104, -0.375010677, -0.41004766, -0.446540276, -0.484488756, -0.5238933419999999, -0.5647542839999999, -0.607071842, -0.650846284, -0.696077888, -0.742766943, -0.790913746, -0.840518601, -0.891581826, -0.944103745, -0.998084693, -1.053525013, -1.110425059, -1.168785193, -1.228605788, -1.289887224, -1.3526298939999999, -1.4168341969999998, -1.482500543, -1.549629351, -1.618221051, -1.688276082, -1.75979489, -1.8327779339999999, -1.90722568, -1.983138606, -2.123]
Y_real_2mm = [-1*yi for yi in Y_real_2mm]

# plt.plot([0, net_interval], [0, 0], c = 'r', linewidth = 1)
# plt.plot(X_real_1mm, Y_real_1mm, label = 'real - 1mm')
# plt.plot(X_real_2mm, Y_real_2mm, label = 'real - 2mm')
# plt.legend()

# plt.grid()
# plt.show()

print(max(Y_real_1mm))
print(max_deform_1_2mm)

